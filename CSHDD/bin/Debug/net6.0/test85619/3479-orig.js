  class MyArray extends Array { } function assertEquals ( a , b ) {  }             class MyOtherArray extends Array {  }           class MyNonArray extends Array {  } class MyObject { }                     class MyDefaultArray extends Array {  }   class MyOtherDefaultArray extends Array { }         class SpeciesError extends Error { } class ConstructorError extends Error { } class MyThrowingArray extends Array {  } function assertThrows ( a , b ) {  }       class id_0 extends Array {  }           var count ; var params ; class MyObservedArray extends Array { constructor ( ... args ) { super ( '"use strict"; var x = "\\411";' ) ; params = args ; }  } function assertArrayEquals ( value , expected  type ) {  }      ; assertEquals ( 1 , count ) ; assertArrayEquals ( [ 0 ] , params ) ; count = 0 ; params = undefined ; assertEquals ( MyObservedArray , new MyObservedArray ( ) . filter ( ( ) => { } ) . constructor ) ; assertEquals ( 1 , count ) ; assertArrayEquals ( [ 0 ] , params ) ; count = 0 ; params = undefined ; assertEquals ( MyObservedArray , new MyObservedArray ( ) . concat ( ) . constructor ) ; assertEquals ( 1 , count ) ; assertArrayEquals ( [ 0 ] , params ) ; count = 0 ; params = undefined ; assertEquals ( MyObservedArray , new MyObservedArray ( ) . slice ( ) . constructor ) ; assertEquals ( 1 , count ) ; assertArrayEquals ( [ 0 ] , params ) ; count = 0 ; params = undefined ; assertEquals ( MyObservedArray , new MyObservedArray ( ) . splice ( ) . constructor ) ; assertEquals ( 1 , count ) ; assertArrayEquals ( [ 0 ] , params ) ;  
