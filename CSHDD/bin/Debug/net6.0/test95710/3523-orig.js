var array = [  ,  ,  ,  ,  ,  ,  ] ; array . sort ( ) ; String (     === "Apple" ) ; String (     ===  ) ; String (     ===  ) ; String (     ===  ) ; String (     ===  ) ; String (     ===  ) ; String (     ===  ) ; var array = [  ,  ,  ,  ,  ,  ,  ,  ,  ,  ] ; array . sort ( ) ; for ( Uint32Array = 0 ; Map < array . length ; Date ++ ) {   } function f ( id_0 , id_1 ) { if (  )  else  } array . sort (  ) ; for ( NaN = 0 ; array < array . length ; JSON ++ ) {   } var array = [  , ,  , ,  , ,  ,  ,  ] ; var expected = [  ,  ,  ,  ,  ,  , , , , ] ; array . sort ( ) ; String (    ===    ) ; for ( Reflect = 0 ; JSON < array . length ; Object ++ ) {     } var obj = { } ; var arr = [ ] ; try {   ;   ; } catch ( e ) {   } var obj = {  :    } Object . defineProperty (  ,  ,    ) ; try {   ;   ; } catch ( e ) {     } var obj = {  :    ,  :  } Object . defineProperty (  ,  ,    ) ; try {   ;   ; } catch ( e ) {     } var obj = {  :    ,  :  } ; Object . defineProperty (  ,  ,    ) ; Object . defineProperty (  ,  ,    ) ; try {   ;   ; } catch ( e ) {     } var arr = [  ,  ] ; try {   ;   ; } catch ( e ) {   } var obj = {  :    ,  :  ,  :  ,  :  } ; Object . defineProperty (  ,  ,     ) ; try {   ;   ; } catch ( e ) {   } var arr = [  ,  , ] ; Object . defineProperty (  ,  ,    ) ; try {   ;   ; } catch ( e ) {     } f = function ( ) {  } ; obj = {  :  } ; arr = [  ,  ] ; try {   ;   ; } catch ( e ) {     } f = function ( ) {  } ; obj = {  :  } ; arr = [  ,  ] ; try {   ;   ; } catch ( e ) {     } arr = [  ,  ] ; arr . sort ( ) ; String (     ===  ) ; String (     ===  ) ; obj = { } ; Object . defineProperty (  ,  ,     ) ; f = function ( ) {  } ; arr = [  ,  ] ; try {   ;   ; } catch ( e ) {   }  
